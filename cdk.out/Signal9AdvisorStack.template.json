{
 "Resources": {
  "DatabaseAssetsTableA76744CA": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "asset_id",
      "AttributeType": "S"
     },
     {
      "AttributeName": "symbol",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "GlobalSecondaryIndexes": [
     {
      "IndexName": "SymbolIndex",
      "KeySchema": [
       {
        "AttributeName": "symbol",
        "KeyType": "HASH"
       },
       {
        "AttributeName": "asset_id",
        "KeyType": "RANGE"
       }
      ],
      "Projection": {
       "ProjectionType": "ALL"
      }
     }
    ],
    "KeySchema": [
     {
      "AttributeName": "asset_id",
      "KeyType": "HASH"
     }
    ],
    "PointInTimeRecoverySpecification": {
     "PointInTimeRecoveryEnabled": true
    },
    "SSESpecification": {
     "SSEEnabled": true
    },
    "TableName": "development-signal9-assets",
    "Tags": [
     {
      "Key": "Environment",
      "Value": "development"
     },
     {
      "Key": "ManagedBy",
      "Value": "CDK"
     },
     {
      "Key": "Phase",
      "Value": "Phase1"
     },
     {
      "Key": "Project",
      "Value": "Signal9Advisor"
     }
    ],
    "TimeToLiveSpecification": {
     "AttributeName": "ttl",
     "Enabled": true
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/Database/AssetsTable/Resource"
   }
  },
  "DatabaseEarningsCalendarTableB92AB8D3": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "date",
      "AttributeType": "S"
     },
     {
      "AttributeName": "symbol",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "GlobalSecondaryIndexes": [
     {
      "IndexName": "SymbolDateIndex",
      "KeySchema": [
       {
        "AttributeName": "symbol",
        "KeyType": "HASH"
       },
       {
        "AttributeName": "date",
        "KeyType": "RANGE"
       }
      ],
      "Projection": {
       "ProjectionType": "ALL"
      }
     }
    ],
    "KeySchema": [
     {
      "AttributeName": "date",
      "KeyType": "HASH"
     },
     {
      "AttributeName": "symbol",
      "KeyType": "RANGE"
     }
    ],
    "PointInTimeRecoverySpecification": {
     "PointInTimeRecoveryEnabled": true
    },
    "SSESpecification": {
     "SSEEnabled": true
    },
    "TableName": "development-signal9-earnings-calendar",
    "Tags": [
     {
      "Key": "Environment",
      "Value": "development"
     },
     {
      "Key": "ManagedBy",
      "Value": "CDK"
     },
     {
      "Key": "Phase",
      "Value": "Phase1"
     },
     {
      "Key": "Project",
      "Value": "Signal9Advisor"
     }
    ],
    "TimeToLiveSpecification": {
     "AttributeName": "ttl",
     "Enabled": true
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/Database/EarningsCalendarTable/Resource"
   }
  },
  "DatabaseAnalysisQueueTable3DCDA5DE": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "queue_id",
      "AttributeType": "S"
     },
     {
      "AttributeName": "timestamp",
      "AttributeType": "S"
     },
     {
      "AttributeName": "status",
      "AttributeType": "S"
     },
     {
      "AttributeName": "symbol",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "GlobalSecondaryIndexes": [
     {
      "IndexName": "StatusIndex",
      "KeySchema": [
       {
        "AttributeName": "status",
        "KeyType": "HASH"
       },
       {
        "AttributeName": "timestamp",
        "KeyType": "RANGE"
       }
      ],
      "Projection": {
       "ProjectionType": "ALL"
      }
     },
     {
      "IndexName": "SymbolIndex",
      "KeySchema": [
       {
        "AttributeName": "symbol",
        "KeyType": "HASH"
       },
       {
        "AttributeName": "timestamp",
        "KeyType": "RANGE"
       }
      ],
      "Projection": {
       "ProjectionType": "ALL"
      }
     }
    ],
    "KeySchema": [
     {
      "AttributeName": "queue_id",
      "KeyType": "HASH"
     },
     {
      "AttributeName": "timestamp",
      "KeyType": "RANGE"
     }
    ],
    "PointInTimeRecoverySpecification": {
     "PointInTimeRecoveryEnabled": true
    },
    "SSESpecification": {
     "SSEEnabled": true
    },
    "TableName": "development-signal9-analysis-queue",
    "Tags": [
     {
      "Key": "Environment",
      "Value": "development"
     },
     {
      "Key": "ManagedBy",
      "Value": "CDK"
     },
     {
      "Key": "Phase",
      "Value": "Phase1"
     },
     {
      "Key": "Project",
      "Value": "Signal9Advisor"
     }
    ],
    "TimeToLiveSpecification": {
     "AttributeName": "ttl",
     "Enabled": true
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/Database/AnalysisQueueTable/Resource"
   }
  },
  "S3AnalysisDataBucketA2A4D8B3": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
       }
      }
     ]
    },
    "BucketName": "development-signal9-analysis-data-152319255064",
    "LifecycleConfiguration": {
     "Rules": [
      {
       "ExpirationInDays": 2555,
       "Id": "AnalysisDataLifecycle",
       "Status": "Enabled",
       "Transitions": [
        {
         "StorageClass": "STANDARD_IA",
         "TransitionInDays": 30
        },
        {
         "StorageClass": "GLACIER",
         "TransitionInDays": 90
        },
        {
         "StorageClass": "DEEP_ARCHIVE",
         "TransitionInDays": 365
        }
       ]
      }
     ]
    },
    "OwnershipControls": {
     "Rules": [
      {
       "ObjectOwnership": "ObjectWriter"
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "Tags": [
     {
      "Key": "Environment",
      "Value": "development"
     },
     {
      "Key": "ManagedBy",
      "Value": "CDK"
     },
     {
      "Key": "Phase",
      "Value": "Phase1"
     },
     {
      "Key": "Project",
      "Value": "Signal9Advisor"
     }
    ],
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/S3/AnalysisDataBucket/Resource"
   }
  },
  "S3AnalysisDataBucketPolicy1456B675": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "S3AnalysisDataBucketA2A4D8B3"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "S3AnalysisDataBucketA2A4D8B3",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "S3AnalysisDataBucketA2A4D8B3",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/S3/AnalysisDataBucket/Policy/Resource"
   }
  },
  "SecretsSecretRotationFunctionServiceRole4C20F509": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Tags": [
     {
      "Key": "Component",
      "Value": "SecretRotation"
     },
     {
      "Key": "Environment",
      "Value": "development"
     },
     {
      "Key": "ManagedBy",
      "Value": "CDK"
     },
     {
      "Key": "Phase",
      "Value": "Phase1"
     },
     {
      "Key": "Project",
      "Value": "Signal9Advisor"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/Secrets/SecretRotationFunction/ServiceRole/Resource"
   }
  },
  "SecretsSecretRotationFunctionServiceRoleDefaultPolicy650A8F96": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "secretsmanager:DescribeSecret",
        "secretsmanager:GetSecretValue",
        "secretsmanager:PutSecretValue",
        "secretsmanager:UpdateSecretVersionStage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Ref": "SecretsApiCredentialsSecret1D803A0F"
       }
      },
      {
       "Action": "secretsmanager:GetRandomPassword",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "SecretsSecretRotationFunctionServiceRoleDefaultPolicy650A8F96",
    "Roles": [
     {
      "Ref": "SecretsSecretRotationFunctionServiceRole4C20F509"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/Secrets/SecretRotationFunction/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "SecretsSecretRotationFunction1951C011": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "\n        exports.handler = async (event) => {\n          console.log('Secret rotation triggered:', JSON.stringify(event, null, 2));\n          \n          // Custom rotation logic for external API keys\n          // For external APIs like AlphaVantage/Alpaca, rotation is typically manual\n          // This function logs the rotation attempt and provides notification\n          \n          const { SecretId, Step } = event;\n          \n          switch (Step) {\n            case 'createSecret':\n              console.log('Step: Creating new secret version');\n              // For external APIs, this would typically involve generating new API keys\n              // through the provider's API or notifying administrators\n              break;\n              \n            case 'setSecret':\n              console.log('Step: Setting new secret in rotation');\n              // This step would update the secret with new credentials\n              break;\n              \n            case 'testSecret':\n              console.log('Step: Testing new secret');\n              // Test the new credentials against the APIs\n              break;\n              \n            case 'finishSecret':\n              console.log('Step: Finishing rotation');\n              // Cleanup and complete the rotation\n              break;\n              \n            default:\n              throw new Error(`Invalid step: ${Step}`);\n          }\n          \n          return {\n            statusCode: 200,\n            body: JSON.stringify({\n              message: 'Rotation step completed',\n              step: Step,\n              secretId: SecretId,\n              timestamp: new Date().toISOString()\n            })\n          };\n        };\n      "
    },
    "Description": "Handles rotation of external API credentials",
    "Environment": {
     "Variables": {
      "LOG_LEVEL": "INFO"
     }
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "SecretsSecretRotationFunctionServiceRole4C20F509",
      "Arn"
     ]
    },
    "Runtime": "nodejs22.x",
    "Tags": [
     {
      "Key": "Component",
      "Value": "SecretRotation"
     },
     {
      "Key": "Environment",
      "Value": "development"
     },
     {
      "Key": "ManagedBy",
      "Value": "CDK"
     },
     {
      "Key": "Phase",
      "Value": "Phase1"
     },
     {
      "Key": "Project",
      "Value": "Signal9Advisor"
     }
    ],
    "Timeout": 300
   },
   "DependsOn": [
    "SecretsSecretRotationFunctionServiceRoleDefaultPolicy650A8F96",
    "SecretsSecretRotationFunctionServiceRole4C20F509"
   ],
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/Secrets/SecretRotationFunction/Resource"
   }
  },
  "SecretsSecretRotationFunctionInvokeN0a2GKfZP0JmDqDEVhhu6A0TUv3NyNbk4YMFKNcDA5FCE03": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "SecretsSecretRotationFunction1951C011",
      "Arn"
     ]
    },
    "Principal": "secretsmanager.amazonaws.com"
   },
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/Secrets/SecretRotationFunction/InvokeN0--a2GKfZP0JmDqDE--Vhhu6+A0TUv3NyNbk4YM+FKNc="
   }
  },
  "SecretsApiCredentialsSecret1D803A0F": {
   "Type": "AWS::SecretsManager::Secret",
   "Properties": {
    "Description": "External API credentials for AlphaVantage and Alpaca APIs",
    "GenerateSecretString": {
     "ExcludeCharacters": "\"@/\\",
     "GenerateStringKey": "placeholder",
     "IncludeSpace": false,
     "RequireEachIncludedType": true,
     "SecretStringTemplate": "{\"alphaVantageApiKey\":\"\",\"alpacaApiKey\":\"\",\"alpacaApiSecret\":\"\",\"lastUpdated\":\"2025-07-21T23:57:29.181Z\"}"
    },
    "Name": "signal9-advisor/api-credentials",
    "Tags": [
     {
      "Key": "Component",
      "Value": "SecretsManager"
     },
     {
      "Key": "Environment",
      "Value": "development"
     },
     {
      "Key": "ManagedBy",
      "Value": "CDK"
     },
     {
      "Key": "Phase",
      "Value": "Phase1"
     },
     {
      "Key": "Project",
      "Value": "Signal9Advisor"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/Secrets/ApiCredentialsSecret/Resource"
   }
  },
  "SecretsApiCredentialsSecretRotationSchedule4D342D07": {
   "Type": "AWS::SecretsManager::RotationSchedule",
   "Properties": {
    "RotateImmediatelyOnUpdate": false,
    "RotationLambdaARN": {
     "Fn::GetAtt": [
      "SecretsSecretRotationFunction1951C011",
      "Arn"
     ]
    },
    "RotationRules": {
     "ScheduleExpression": "rate(90 days)"
    },
    "SecretId": {
     "Ref": "SecretsApiCredentialsSecret1D803A0F"
    }
   },
   "DependsOn": [
    "SecretsSecretRotationFunctionInvokeN0a2GKfZP0JmDqDEVhhu6A0TUv3NyNbk4YMFKNcDA5FCE03"
   ],
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/Secrets/ApiCredentialsSecret/RotationSchedule/Resource"
   }
  },
  "SecretsApiCredentialsSecretPolicyE26DA9FC": {
   "Type": "AWS::SecretsManager::ResourcePolicy",
   "Properties": {
    "ResourcePolicy": {
     "Statement": [
      {
       "Action": "secretsmanager:DeleteSecret",
       "Effect": "Deny",
       "Principal": {
        "AWS": "arn:aws:iam::152319255064:root"
       },
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "SecretId": {
     "Ref": "SecretsApiCredentialsSecret1D803A0F"
    }
   },
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/Secrets/ApiCredentialsSecret/Policy/Resource"
   }
  },
  "SecretsAccessSecretsReaderPolicy39A7D742": {
   "Type": "AWS::IAM::ManagedPolicy",
   "Properties": {
    "Description": "Policy for Lambda functions to read API credentials from Secrets Manager",
    "Path": "/",
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "secretsmanager:DescribeSecret",
        "secretsmanager:GetSecretValue"
       ],
       "Condition": {
        "StringEquals": {
         "secretsmanager:ResourceTag/Project": "Signal9Advisor"
        }
       },
       "Effect": "Allow",
       "Resource": {
        "Ref": "SecretsApiCredentialsSecret1D803A0F"
       }
      },
      {
       "Action": "secretsmanager:ListSecrets",
       "Condition": {
        "StringEquals": {
         "secretsmanager:ResourceTag/Project": "Signal9Advisor"
        }
       },
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": "arn:aws:logs:us-east-1:152319255064:log-group:/aws/lambda/*"
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/SecretsAccess/SecretsReaderPolicy/Resource"
   }
  },
  "SecretsAccessSecretsReaderRoleF7B76B17": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Description": "Role for Lambda functions that need to access API credentials",
    "ManagedPolicyArns": [
     {
      "Ref": "SecretsAccessSecretsReaderPolicy39A7D742"
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "MaxSessionDuration": 3600,
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": "secretsmanager:*",
         "Condition": {
          "StringNotEquals": {
           "secretsmanager:ResourceTag/Project": "Signal9Advisor"
          }
         },
         "Effect": "Deny",
         "Resource": "*"
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "RestrictedSecretsAccess"
     }
    ],
    "Tags": [
     {
      "Key": "Component",
      "Value": "IAMRole"
     },
     {
      "Key": "Environment",
      "Value": "development"
     },
     {
      "Key": "ManagedBy",
      "Value": "CDK"
     },
     {
      "Key": "Phase",
      "Value": "Phase1"
     },
     {
      "Key": "Project",
      "Value": "Signal9Advisor"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/SecretsAccess/SecretsReaderRole/Resource"
   }
  },
  "SecretsMonitoringSecretsTrailBucketC8106A05": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
       }
      }
     ]
    },
    "BucketName": "development-signal9-secrets-trail-152319255064",
    "LifecycleConfiguration": {
     "Rules": [
      {
       "ExpirationInDays": 2555,
       "Id": "CloudTrailLogRetention",
       "Status": "Enabled",
       "Transitions": [
        {
         "StorageClass": "STANDARD_IA",
         "TransitionInDays": 30
        },
        {
         "StorageClass": "GLACIER",
         "TransitionInDays": 90
        }
       ]
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "Tags": [
     {
      "Key": "Component",
      "Value": "SecretsMonitoring"
     },
     {
      "Key": "Environment",
      "Value": "development"
     },
     {
      "Key": "ManagedBy",
      "Value": "CDK"
     },
     {
      "Key": "Phase",
      "Value": "Phase1"
     },
     {
      "Key": "Project",
      "Value": "Signal9Advisor"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/SecretsMonitoring/SecretsTrailBucket/Resource"
   }
  },
  "SecretsMonitoringSecretsTrailBucketPolicy1CC16E38": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "SecretsMonitoringSecretsTrailBucketC8106A05"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "SecretsMonitoringSecretsTrailBucketC8106A05",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "SecretsMonitoringSecretsTrailBucketC8106A05",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "s3:GetBucketAcl",
       "Effect": "Allow",
       "Principal": {
        "Service": "cloudtrail.amazonaws.com"
       },
       "Resource": {
        "Fn::GetAtt": [
         "SecretsMonitoringSecretsTrailBucketC8106A05",
         "Arn"
        ]
       }
      },
      {
       "Action": "s3:PutObject",
       "Condition": {
        "StringEquals": {
         "s3:x-amz-acl": "bucket-owner-full-control"
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "cloudtrail.amazonaws.com"
       },
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "SecretsMonitoringSecretsTrailBucketC8106A05",
            "Arn"
           ]
          },
          "/secrets-manager-logs//AWSLogs/152319255064/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/SecretsMonitoring/SecretsTrailBucket/Policy/Resource"
   }
  },
  "SecretsMonitoringSecretsTrailLogGroup7DAC2E15": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": "/aws/cloudtrail/signal9-advisor-secrets",
    "RetentionInDays": 30,
    "Tags": [
     {
      "Key": "Component",
      "Value": "SecretsMonitoring"
     },
     {
      "Key": "Environment",
      "Value": "development"
     },
     {
      "Key": "ManagedBy",
      "Value": "CDK"
     },
     {
      "Key": "Phase",
      "Value": "Phase1"
     },
     {
      "Key": "Project",
      "Value": "Signal9Advisor"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/SecretsMonitoring/SecretsTrailLogGroup/Resource"
   }
  },
  "SecretsMonitoringSecretsTrailLogGroupUnauthorizedAccessMetricFilterBA22187C": {
   "Type": "AWS::Logs::MetricFilter",
   "Properties": {
    "FilterPattern": "[version, account, time, id, type, user, region, source, service=\"secretsmanager\", action=\"GetSecretValue\", result=\"FAILURE\", ...]",
    "LogGroupName": {
     "Ref": "SecretsMonitoringSecretsTrailLogGroup7DAC2E15"
    },
    "MetricTransformations": [
     {
      "DefaultValue": 0,
      "MetricName": "UnauthorizedAccess",
      "MetricNamespace": "Signal9Advisor/Secrets",
      "MetricValue": "1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/SecretsMonitoring/SecretsTrailLogGroup/UnauthorizedAccessMetricFilter/Resource"
   }
  },
  "SecretsMonitoringSecretsTrailLogGroupHighVolumeAccessMetricFilter4B5C29DF": {
   "Type": "AWS::Logs::MetricFilter",
   "Properties": {
    "FilterPattern": "{ $.eventName = \"GetSecretValue\" }",
    "LogGroupName": {
     "Ref": "SecretsMonitoringSecretsTrailLogGroup7DAC2E15"
    },
    "MetricTransformations": [
     {
      "DefaultValue": 0,
      "MetricName": "SecretAccessCount",
      "MetricNamespace": "Signal9Advisor/Secrets",
      "MetricValue": "1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/SecretsMonitoring/SecretsTrailLogGroup/HighVolumeAccessMetricFilter/Resource"
   }
  },
  "SecretsMonitoringSecretsTrailLogGroupSecretRotationMetricFilter9CC1EABA": {
   "Type": "AWS::Logs::MetricFilter",
   "Properties": {
    "FilterPattern": "{ $.eventName = \"RotateSecret\" }",
    "LogGroupName": {
     "Ref": "SecretsMonitoringSecretsTrailLogGroup7DAC2E15"
    },
    "MetricTransformations": [
     {
      "DefaultValue": 0,
      "MetricName": "SecretRotationCount",
      "MetricNamespace": "Signal9Advisor/Secrets",
      "MetricValue": "1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/SecretsMonitoring/SecretsTrailLogGroup/SecretRotationMetricFilter/Resource"
   }
  },
  "SecretsMonitoringSecretsTrailLogGroupSecretUpdateMetricFilterAD9B5AF7": {
   "Type": "AWS::Logs::MetricFilter",
   "Properties": {
    "FilterPattern": "{ ($.eventName = \"CreateSecret\") || ($.eventName = \"UpdateSecret\") }",
    "LogGroupName": {
     "Ref": "SecretsMonitoringSecretsTrailLogGroup7DAC2E15"
    },
    "MetricTransformations": [
     {
      "DefaultValue": 0,
      "MetricName": "SecretUpdateCount",
      "MetricNamespace": "Signal9Advisor/Secrets",
      "MetricValue": "1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/SecretsMonitoring/SecretsTrailLogGroup/SecretUpdateMetricFilter/Resource"
   }
  },
  "SecretsMonitoringSecretsTrailLogGroupAccessByRegionMetricFilter3CD8BE1A": {
   "Type": "AWS::Logs::MetricFilter",
   "Properties": {
    "FilterPattern": "{ $.eventName = \"GetSecretValue\" }",
    "LogGroupName": {
     "Ref": "SecretsMonitoringSecretsTrailLogGroup7DAC2E15"
    },
    "MetricTransformations": [
     {
      "DefaultValue": 0,
      "MetricName": "AccessByRegion",
      "MetricNamespace": "Signal9Advisor/Secrets",
      "MetricValue": "1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/SecretsMonitoring/SecretsTrailLogGroup/AccessByRegionMetricFilter/Resource"
   }
  },
  "SecretsMonitoringSecretsManagerTrailLogsRoleA790478A": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "cloudtrail.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Component",
      "Value": "SecretsMonitoring"
     },
     {
      "Key": "Environment",
      "Value": "development"
     },
     {
      "Key": "ManagedBy",
      "Value": "CDK"
     },
     {
      "Key": "Phase",
      "Value": "Phase1"
     },
     {
      "Key": "Project",
      "Value": "Signal9Advisor"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/SecretsMonitoring/SecretsManagerTrail/LogsRole/Resource"
   }
  },
  "SecretsMonitoringSecretsManagerTrailLogsRoleDefaultPolicy57C43DFB": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "SecretsMonitoringSecretsTrailLogGroup7DAC2E15",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "SecretsMonitoringSecretsManagerTrailLogsRoleDefaultPolicy57C43DFB",
    "Roles": [
     {
      "Ref": "SecretsMonitoringSecretsManagerTrailLogsRoleA790478A"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/SecretsMonitoring/SecretsManagerTrail/LogsRole/DefaultPolicy/Resource"
   }
  },
  "SecretsMonitoringSecretsManagerTrailCB8E5756": {
   "Type": "AWS::CloudTrail::Trail",
   "Properties": {
    "CloudWatchLogsLogGroupArn": {
     "Fn::GetAtt": [
      "SecretsMonitoringSecretsTrailLogGroup7DAC2E15",
      "Arn"
     ]
    },
    "CloudWatchLogsRoleArn": {
     "Fn::GetAtt": [
      "SecretsMonitoringSecretsManagerTrailLogsRoleA790478A",
      "Arn"
     ]
    },
    "EnableLogFileValidation": true,
    "EventSelectors": [
     {
      "DataResources": [
       {
        "Type": "AWS::S3::Object",
        "Values": [
         "arn:aws:s3:::"
        ]
       }
      ]
     }
    ],
    "IncludeGlobalServiceEvents": true,
    "IsLogging": true,
    "IsMultiRegionTrail": false,
    "S3BucketName": {
     "Ref": "SecretsMonitoringSecretsTrailBucketC8106A05"
    },
    "S3KeyPrefix": "secrets-manager-logs/",
    "Tags": [
     {
      "Key": "Component",
      "Value": "SecretsMonitoring"
     },
     {
      "Key": "Environment",
      "Value": "development"
     },
     {
      "Key": "ManagedBy",
      "Value": "CDK"
     },
     {
      "Key": "Phase",
      "Value": "Phase1"
     },
     {
      "Key": "Project",
      "Value": "Signal9Advisor"
     }
    ],
    "TrailName": "signal9-advisor-secrets-trail"
   },
   "DependsOn": [
    "SecretsMonitoringSecretsManagerTrailLogsRoleDefaultPolicy57C43DFB",
    "SecretsMonitoringSecretsManagerTrailLogsRoleA790478A",
    "SecretsMonitoringSecretsTrailBucketPolicy1CC16E38"
   ],
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/SecretsMonitoring/SecretsManagerTrail/Resource"
   }
  },
  "SecretsMonitoringUnauthorizedSecretAccessAlarmC35A092D": {
   "Type": "AWS::CloudWatch::Alarm",
   "Properties": {
    "ActionsEnabled": true,
    "AlarmDescription": "Unauthorized access attempts to Signal9 Advisor secrets detected",
    "AlarmName": "Signal9Advisor-UnauthorizedSecretAccess",
    "ComparisonOperator": "GreaterThanOrEqualToThreshold",
    "EvaluationPeriods": 1,
    "MetricName": "UnauthorizedAccess",
    "Namespace": "Signal9Advisor/Secrets",
    "Period": 300,
    "Statistic": "Sum",
    "Tags": [
     {
      "Key": "Environment",
      "Value": "development"
     },
     {
      "Key": "ManagedBy",
      "Value": "CDK"
     },
     {
      "Key": "Phase",
      "Value": "Phase1"
     },
     {
      "Key": "Project",
      "Value": "Signal9Advisor"
     }
    ],
    "Threshold": 1,
    "TreatMissingData": "notBreaching"
   },
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/SecretsMonitoring/UnauthorizedSecretAccessAlarm/Resource"
   }
  },
  "SecretsMonitoringHighVolumeSecretAccessAlarm7D2AE461": {
   "Type": "AWS::CloudWatch::Alarm",
   "Properties": {
    "ActionsEnabled": true,
    "AlarmDescription": "High volume of secret access attempts detected (>10 per minute)",
    "AlarmName": "Signal9Advisor-HighVolumeSecretAccess",
    "ComparisonOperator": "GreaterThanThreshold",
    "EvaluationPeriods": 1,
    "MetricName": "SecretAccessCount",
    "Namespace": "Signal9Advisor/Secrets",
    "Period": 60,
    "Statistic": "Sum",
    "Tags": [
     {
      "Key": "Environment",
      "Value": "development"
     },
     {
      "Key": "ManagedBy",
      "Value": "CDK"
     },
     {
      "Key": "Phase",
      "Value": "Phase1"
     },
     {
      "Key": "Project",
      "Value": "Signal9Advisor"
     }
    ],
    "Threshold": 10,
    "TreatMissingData": "notBreaching"
   },
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/SecretsMonitoring/HighVolumeSecretAccessAlarm/Resource"
   }
  },
  "SecretsMonitoringSecretsMonitoringDashboard5E2DCABA": {
   "Type": "AWS::CloudWatch::Dashboard",
   "Properties": {
    "DashboardBody": {
     "Fn::Join": [
      "",
      [
       "{\"widgets\":[{\"type\":\"metric\",\"width\":12,\"height\":6,\"x\":0,\"y\":0,\"properties\":{\"view\":\"timeSeries\",\"title\":\"Secret Access Volume\",\"region\":\"",
       {
        "Ref": "AWS::Region"
       },
       "\",\"metrics\":[[\"Signal9Advisor/Secrets\",\"SecretAccessCount\",{\"stat\":\"Sum\"}]],\"yAxis\":{}}},{\"type\":\"metric\",\"width\":12,\"height\":6,\"x\":0,\"y\":6,\"properties\":{\"view\":\"timeSeries\",\"title\":\"Unauthorized Access Attempts\",\"region\":\"",
       {
        "Ref": "AWS::Region"
       },
       "\",\"metrics\":[[\"Signal9Advisor/Secrets\",\"UnauthorizedAccess\",{\"stat\":\"Sum\"}]],\"yAxis\":{}}},{\"type\":\"metric\",\"width\":6,\"height\":3,\"x\":0,\"y\":12,\"properties\":{\"view\":\"singleValue\",\"title\":\"Total Secret Accesses (24h)\",\"region\":\"",
       {
        "Ref": "AWS::Region"
       },
       "\",\"metrics\":[[\"Signal9Advisor/Secrets\",\"SecretAccessCount\",{\"period\":86400,\"stat\":\"Sum\"}]]}},{\"type\":\"metric\",\"width\":6,\"height\":3,\"x\":6,\"y\":12,\"properties\":{\"view\":\"singleValue\",\"title\":\"Failed Access Attempts (24h)\",\"region\":\"",
       {
        "Ref": "AWS::Region"
       },
       "\",\"metrics\":[[\"Signal9Advisor/Secrets\",\"UnauthorizedAccess\",{\"period\":86400,\"stat\":\"Sum\"}]]}}]}"
      ]
     ]
    },
    "DashboardName": "Signal9Advisor-SecretsMonitoring"
   },
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/SecretsMonitoring/SecretsMonitoringDashboard/Resource"
   }
  },
  "LambdaRolesDataProcessingRole31794ABF": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     },
     {
      "Ref": "SecretsAccessSecretsReaderPolicy39A7D742"
     }
    ],
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "dynamodb:DeleteItem",
          "dynamodb:GetItem",
          "dynamodb:PutItem",
          "dynamodb:Query",
          "dynamodb:Scan",
          "dynamodb:UpdateItem"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::GetAtt": [
            "DatabaseAnalysisQueueTable3DCDA5DE",
            "Arn"
           ]
          },
          {
           "Fn::GetAtt": [
            "DatabaseAssetsTableA76744CA",
            "Arn"
           ]
          },
          {
           "Fn::GetAtt": [
            "DatabaseEarningsCalendarTableB92AB8D3",
            "Arn"
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             {
              "Fn::GetAtt": [
               "DatabaseAnalysisQueueTable3DCDA5DE",
               "Arn"
              ]
             },
             "/index/*"
            ]
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             {
              "Fn::GetAtt": [
               "DatabaseAssetsTableA76744CA",
               "Arn"
              ]
             },
             "/index/*"
            ]
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             {
              "Fn::GetAtt": [
               "DatabaseEarningsCalendarTableB92AB8D3",
               "Arn"
              ]
             },
             "/index/*"
            ]
           ]
          }
         ]
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "DynamoDBAccess"
     },
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "s3:DeleteObject",
          "s3:GetObject",
          "s3:ListBucket",
          "s3:PutObject"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::GetAtt": [
            "S3AnalysisDataBucketA2A4D8B3",
            "Arn"
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             {
              "Fn::GetAtt": [
               "S3AnalysisDataBucketA2A4D8B3",
               "Arn"
              ]
             },
             "/*"
            ]
           ]
          }
         ]
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "S3Access"
     },
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
         ],
         "Effect": "Allow",
         "Resource": "*"
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "CloudWatchLogs"
     }
    ],
    "RoleName": "development-signal9-data-processing-role",
    "Tags": [
     {
      "Key": "Environment",
      "Value": "development"
     },
     {
      "Key": "ManagedBy",
      "Value": "CDK"
     },
     {
      "Key": "Phase",
      "Value": "Phase1"
     },
     {
      "Key": "Project",
      "Value": "Signal9Advisor"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/LambdaRoles/DataProcessingRole/Resource"
   }
  },
  "LambdaRolesDataProcessingRoleDefaultPolicy0D4A867D": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable",
        "dynamodb:GetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:PutItem",
        "dynamodb:Query",
        "dynamodb:Scan",
        "dynamodb:UpdateItem"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "DatabaseAnalysisQueueTable3DCDA5DE",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "DatabaseAssetsTableA76744CA",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "DatabaseEarningsCalendarTableB92AB8D3",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "DatabaseAnalysisQueueTable3DCDA5DE",
             "Arn"
            ]
           },
           "/index/*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "DatabaseAssetsTableA76744CA",
             "Arn"
            ]
           },
           "/index/*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "DatabaseEarningsCalendarTableB92AB8D3",
             "Arn"
            ]
           },
           "/index/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:Abort*",
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "S3AnalysisDataBucketA2A4D8B3",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "S3AnalysisDataBucketA2A4D8B3",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "secretsmanager:DescribeSecret",
        "secretsmanager:GetSecretValue"
       ],
       "Effect": "Allow",
       "Resource": {
        "Ref": "SecretsApiCredentialsSecret1D803A0F"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "LambdaRolesDataProcessingRoleDefaultPolicy0D4A867D",
    "Roles": [
     {
      "Ref": "LambdaRolesDataProcessingRole31794ABF"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/LambdaRoles/DataProcessingRole/DefaultPolicy/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/12QS28CMQyEf0vvwQV6aY99iF6KihbulTdxIZDEKI8iFOW/V9ndstDTzHy2MlbmMJ/OYXqHpzCR6jAxuoW8jigPAk/hK6uzQ8uqhbzB1pB4/XadKSI8QH5J8kCxwsH1smKj5XnEfS7CoG0VQl4kJ6NmVzeu/Yq81SFodkVotJAb7is7HV8d3BIdbkmN/AYUEUh6isF21ENed7kuDq7hiLV7LXek0l/VP9ZQ4OQljTW3pAjD2wD5g7fvntOxblz8kqLXcqFNJN9deJWLkIaTih61gbyp0n1vNcPshFHuID8b9LbOevOGYdcyelXRJZRyObXyzxSPKRbhWBHsw/3P7BFmTzC72wetJz65qC1B0+svaXd9zAYCAAA="
   },
   "Metadata": {
    "aws:cdk:path": "Signal9AdvisorStack/CDKMetadata/Default"
   }
  }
 },
 "Outputs": {
  "AssetsTableName": {
   "Description": "Name of the Assets DynamoDB table",
   "Value": {
    "Ref": "DatabaseAssetsTableA76744CA"
   }
  },
  "EarningsCalendarTableName": {
   "Description": "Name of the Earnings Calendar DynamoDB table",
   "Value": {
    "Ref": "DatabaseEarningsCalendarTableB92AB8D3"
   }
  },
  "AnalysisQueueTableName": {
   "Description": "Name of the Analysis Queue DynamoDB table",
   "Value": {
    "Ref": "DatabaseAnalysisQueueTable3DCDA5DE"
   }
  },
  "AnalysisDataBucketName": {
   "Description": "Name of the Analysis Data S3 bucket",
   "Value": {
    "Ref": "S3AnalysisDataBucketA2A4D8B3"
   }
  },
  "DataProcessingRoleArn": {
   "Description": "ARN of the Data Processing Lambda role",
   "Value": {
    "Fn::GetAtt": [
     "LambdaRolesDataProcessingRole31794ABF",
     "Arn"
    ]
   }
  },
  "ApiCredentialsSecretArn": {
   "Description": "ARN of the API credentials secret",
   "Value": {
    "Ref": "SecretsApiCredentialsSecret1D803A0F"
   }
  },
  "ApiCredentialsSecretName": {
   "Description": "Name of the API credentials secret",
   "Value": {
    "Fn::Join": [
     "-",
     [
      {
       "Fn::Select": [
        0,
        {
         "Fn::Split": [
          "-",
          {
           "Fn::Select": [
            6,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "SecretsApiCredentialsSecret1D803A0F"
              }
             ]
            }
           ]
          }
         ]
        }
       ]
      },
      {
       "Fn::Select": [
        1,
        {
         "Fn::Split": [
          "-",
          {
           "Fn::Select": [
            6,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "SecretsApiCredentialsSecret1D803A0F"
              }
             ]
            }
           ]
          }
         ]
        }
       ]
      },
      {
       "Fn::Select": [
        2,
        {
         "Fn::Split": [
          "-",
          {
           "Fn::Select": [
            6,
            {
             "Fn::Split": [
              ":",
              {
               "Ref": "SecretsApiCredentialsSecret1D803A0F"
              }
             ]
            }
           ]
          }
         ]
        }
       ]
      }
     ]
    ]
   }
  },
  "SecretsReaderRoleArn": {
   "Description": "ARN of the Secrets Reader IAM role",
   "Value": {
    "Fn::GetAtt": [
     "SecretsAccessSecretsReaderRoleF7B76B17",
     "Arn"
    ]
   }
  },
  "SecretsReaderPolicyArn": {
   "Description": "ARN of the Secrets Reader managed policy",
   "Value": {
    "Ref": "SecretsAccessSecretsReaderPolicy39A7D742"
   }
  },
  "SecretRotationLambdaArn": {
   "Description": "ARN of the secret rotation Lambda function",
   "Value": {
    "Fn::GetAtt": [
     "SecretsSecretRotationFunction1951C011",
     "Arn"
    ]
   }
  },
  "SecretsCloudTrailArn": {
   "Description": "ARN of the CloudTrail for secrets monitoring",
   "Value": {
    "Fn::GetAtt": [
     "SecretsMonitoringSecretsManagerTrailCB8E5756",
     "Arn"
    ]
   }
  },
  "SecretsMonitoringDashboardUrl": {
   "Description": "URL to the secrets monitoring CloudWatch dashboard",
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://us-east-1.console.aws.amazon.com/cloudwatch/home?region=us-east-1#dashboards:name=",
      {
       "Ref": "SecretsMonitoringSecretsMonitoringDashboard5E2DCABA"
      }
     ]
    ]
   }
  },
  "SecretsTrailBucketName": {
   "Description": "Name of the S3 bucket for CloudTrail logs",
   "Value": {
    "Ref": "SecretsMonitoringSecretsTrailBucketC8106A05"
   }
  },
  "SecretPopulationCommand": {
   "Description": "Command to populate the API credentials secret",
   "Value": "cd signal9-advisor && ALPHAVANTAGE_API_KEY='your-key' ALPACA_API_KEY='your-key' ALPACA_API_SECRET='your-secret' ./scripts/populate-secrets.sh"
  },
  "SecretTestCommand": {
   "Description": "Command to test secret retrieval",
   "Value": {
    "Fn::Join": [
     "",
     [
      "aws secretsmanager get-secret-value --secret-id ",
      {
       "Fn::Join": [
        "-",
        [
         {
          "Fn::Select": [
           0,
           {
            "Fn::Split": [
             "-",
             {
              "Fn::Select": [
               6,
               {
                "Fn::Split": [
                 ":",
                 {
                  "Ref": "SecretsApiCredentialsSecret1D803A0F"
                 }
                ]
               }
              ]
             }
            ]
           }
          ]
         },
         {
          "Fn::Select": [
           1,
           {
            "Fn::Split": [
             "-",
             {
              "Fn::Select": [
               6,
               {
                "Fn::Split": [
                 ":",
                 {
                  "Ref": "SecretsApiCredentialsSecret1D803A0F"
                 }
                ]
               }
              ]
             }
            ]
           }
          ]
         },
         {
          "Fn::Select": [
           2,
           {
            "Fn::Split": [
             "-",
             {
              "Fn::Select": [
               6,
               {
                "Fn::Split": [
                 ":",
                 {
                  "Ref": "SecretsApiCredentialsSecret1D803A0F"
                 }
                ]
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       ]
      },
      " --region us-east-1"
     ]
    ]
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}